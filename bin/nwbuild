#!/usr/bin/env node
var optimist = require('optimist');
var updateNotifier = require('update-notifier');
var NwBuilder = require('./../lib');
var path = require('path');

var argv = optimist
    .usage('Usage: nwbuild [options] [path]')

    .alias('p', 'plattforms')
    .default('p', 'osx,win')
    .describe('p', 'Plattforms to build, comma-sperated, can be: win,osx,linux32,linux64')

    .alias('v', 'version')
    .default('v', 'latest')
    .describe('v', 'The nw version, eg. 0.8.4')

    .alias('o', 'buildDir')
    .default('o', './build')
    .describe('o', 'The build folder')


    .alias('f', 'forceDownload')
    .default('f', false)
    .describe('f', 'Force download of node-webkit')
    .boolean('f')


    .alias('c', 'checkVersions')
    .default('c', true)
    .describe('c', 'Disables checking versions, usefull when working offline')
    .boolean('c')

    .default('quite', false)
    .describe('quite', 'Disables logging')
    .boolean('quite')

    .argv;

// Howto Help
if (argv.h || argv.help) {
    optimist.showHelp();
    process.exit(0);
}

// Update notification
var notifier = updateNotifier({
    packagePath: './../package.json'
});
if (notifier.update) {
    notifier.notify();
}

// Error if there are no files
var files = argv._[0];
if(!files) {
    console.error('Please specify the path to the node-webkit app you want to build');
    process.exit(0);
}

var options = {
    files: path.resolve(process.cwd(), files) + '/**/*',
    plattforms: argv.plattforms.split(','),
    version: argv.version,
    cacheDir: path.resolve(__dirname, '..', 'cache'),
    buildDir: path.resolve(process.cwd(), argv.buildDir),
    forceDownload: argv.forceDownload,
    checkVersions: argv.checkVersions
};

// Build App
var nw = new NwBuilder(options);

// Logging
if(!argv.quite) {
    nw.on('log',  console.log);
}

// Build
nw.build().then(function () {
    process.exit(0);
}).catch(function (error) {
    if(error) console.error(error);
    process.exit(0);
});